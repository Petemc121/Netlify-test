{"ast":null,"code":"var _jsxFileName = \"/home/peter/Documents/React/bjj-notes/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport Techniques from './Techniques';\nimport Categories from './Categories';\nimport CategoryKeys from './CategoryKeys';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [techniques, setTechniques] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [categoryKeys, setCategoryKeys] = useState([]);\n  const categoryRef = useRef();\n  const techniqueRef = useRef();\n  let techniqueNo = Math.floor(Math.random() * 100000);\n  let catNo = Math.floor(Math.random() * 100000);\n\n  function createLog(e) {\n    const technique = techniqueRef.current.value;\n    let color = \"#\" + getRandom(2000000, 1000000).toString(16);\n\n    for (let i = 0; i < techniques.length; i++) {\n      if (color === techniques[i].color) {\n        const replace = color.replace('#', '');\n        const number = parseInt(replace);\n        const newNumber = number + 100000;\n        color = newNumber;\n      }\n    }\n\n    if (technique === \"\") {\n      alert(\"Please enter a technique.\");\n      return;\n    }\n\n    setTechniques(prevTechniques => {\n      return [...prevTechniques, {\n        id: techniqueNo,\n        technique: technique,\n        color: color,\n        notes: []\n      }];\n    });\n    techniqueRef.current.value = null;\n  }\n\n  function addNote(notes, chosenTechnique) {\n    setTechniques(techniques => {\n      let updatedTechniques = [];\n      techniques.forEach(technique => {\n        if (technique.id == chosenTechnique.id) {\n          let updatedTechnique = {\n            id: chosenTechnique.id,\n            technique: chosenTechnique.technique,\n            color: chosenTechnique.color,\n            notes: notes\n          };\n          updatedTechniques.push(updatedTechnique);\n        } else {\n          updatedTechniques.push(technique);\n        }\n\n        console.log(updatedTechniques);\n      });\n      return updatedTechniques;\n    });\n  }\n\n  function editNote(noteEdit, noteID, chosenTechnique) {\n    setTechniques(techniques => {\n      let updatedTechniques = [];\n      techniques.forEach(technique => {\n        let updatedTechniqueNotes = [];\n\n        if (technique.id === chosenTechnique.id) {\n          technique.notes.forEach(techniqueNote => {\n            if (techniqueNote.noteID === noteID) {\n              updatedTechniqueNotes.push({\n                noteText: noteEdit,\n                noteID: noteID,\n                noteTitle: \"Note \" + noteID\n              });\n            } else {\n              updatedTechniqueNotes.push({\n                noteText: techniqueNote.noteText,\n                noteID: techniqueNote.noteID,\n                noteTitle: \"Note \" + techniqueNote.noteID\n              });\n            }\n          });\n          updatedTechniques.push({\n            id: technique.id,\n            technique: technique.technique,\n            color: technique.color,\n            notes: updatedTechniqueNotes\n          });\n        } else {\n          updatedTechniques.push({\n            id: technique.id,\n            technique: technique.technique,\n            color: technique.color,\n            notes: technique.notes\n          });\n        }\n      });\n      return updatedTechniques;\n    });\n  }\n\n  function handleCreateCategory() {\n    // GREEN PURPLE BLUE BROWN RED YELLOW ORANGE BROWN GREY WHITE\n    const colorArray = [\"#08892c\", \"#8e057e\", \"#3f3f8c\", \"#874c47\", \"#dd9300\", \"#a32f2f\", \"#d1ca00\", \"#2d2020\"];\n    const category = categoryRef.current.value;\n\n    if (category === \"\") {\n      alert(\"Please enter a category.\");\n      return;\n    }\n\n    setCategories(prevCategories => {\n      return [...prevCategories, {\n        id: catNo,\n        category: category,\n        color: colorArray[categories.length],\n        catTechniques: []\n      }];\n    });\n    setCategoryKeys(prevCategoryKeys => {\n      return [...prevCategoryKeys, {\n        id: catNo,\n        category: category,\n        color: colorArray[categories.length],\n        catKeyTechniques: []\n      }];\n    });\n    categoryRef.current.value = null;\n  }\n\n  function getRandom(max, min) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  const handleDeleteTechnique = techniqueID => {\n    setTechniques(techniques => {\n      return techniques.filter(technique => technique.id !== techniqueID);\n    });\n  };\n\n  const handleDeleteCategory = categoryID => {\n    setCategories(categories => {\n      return categories.filter(category => category.id !== categoryID);\n    });\n    setCategoryKeys(categoryKeys => {\n      return categoryKeys.filter(categoryKey => categoryKey.id !== categoryID);\n    });\n  };\n\n  function handleDeleteNote(noteID, techniqueID) {\n    setTechniques(techniques => {\n      return techniques.map(technique => {\n        if (technique.id === techniqueID) {\n          const newNotes = technique.notes.filter(note => note.noteID != noteID);\n          return {\n            id: technique.id,\n            technique: technique.technique,\n            color: technique.color,\n            notes: newNotes\n          };\n        } else {\n          return {\n            id: technique.id,\n            technique: technique.technique,\n            color: technique.color,\n            notes: technique.notes\n          };\n        }\n      });\n    });\n  }\n\n  const handleDeleteCatTechnique = (techniqueID, categoryID) => {\n    setCategories(categories => {\n      let updatedCategories = [];\n\n      for (let i = 0; i < categories.length; i++) {\n        if (categories[i].id === categoryID) {\n          updatedCategories.push({\n            id: categories[i].id,\n            category: categories[i].category,\n            color: categories[i].color,\n            catTechniques: [categories[i].catTechniques.filter(catTechnique => catTechnique[i].id !== techniqueID)]\n          });\n        }\n      }\n    });\n  };\n\n  function addCatTechNote(newNotes, chosenCatTechnique) {\n    setCategories(categories => {\n      let updatedCategories = [];\n      categories.forEach(category => {\n        let updatedCatTechniques = [];\n        category.catTechniques.forEach(catTechnique => {\n          if (catTechnique.id == chosenCatTechnique.id) {\n            let updatedTechnique = {\n              id: chosenCatTechnique.id,\n              technique: chosenCatTechnique.technique,\n              color: chosenCatTechnique.color,\n              notes: newNotes\n            };\n            updatedCatTechniques.push(updatedTechnique);\n          } else {\n            updatedCatTechniques.push(catTechnique);\n          }\n        });\n        updatedCategories.push({\n          id: category.id,\n          category: category.category,\n          color: category.color,\n          catTechniques: updatedCatTechniques\n        });\n      });\n      return updatedCategories;\n    });\n  }\n\n  function handleDeleteCatTechNote(noteID, techniqueID) {\n    setCategories(categories => {\n      return categories.map(category => {\n        let updatedCatTechniques = category.catTechniques.map(catTechnique => {\n          if (catTechnique.id === techniqueID) {\n            const newNotes = catTechnique.notes.filter(note => note.noteID != noteID);\n            return {\n              id: catTechnique.id,\n              technique: catTechnique.technique,\n              color: catTechnique.color,\n              notes: newNotes\n            };\n          } else {\n            return {\n              id: catTechnique.id,\n              technique: catTechnique.technique,\n              color: catTechnique.color,\n              notes: catTechnique.notes\n            };\n          }\n        });\n        return {\n          id: category.id,\n          category: category.category,\n          color: category.color,\n          catTechniques: updatedCatTechniques\n        };\n      });\n    });\n  }\n\n  const handleDrop = (e, techniques) => {\n    const draggable = document.querySelector('.dragging');\n    e.target.style.filter = \"brightness(100%)\";\n    techniques.forEach(technique => {\n      if (draggable.id === technique.id.toString()) {\n        const oldColor = category.color;\n        console.log(oldColor);\n        const newColor = lighten(oldColor);\n        setCategories(categories => {\n          return [...prevCatTechniques, {\n            id: technique.id,\n            technique: technique.technique,\n            color: newColor,\n            notes: technique.notes\n          }];\n        });\n      }\n\n      handleDeleteTechnique(technique.id);\n    });\n  };\n\n  function lighten(hex) {\n    const removeHash = hex.substring(1, hex.length);\n    const hexConvert = \"0x\" + removeHash;\n    const asNumber = parseInt(hexConvert);\n    const alteredHex = '#' + (asNumber + 1000000).toString(16);\n    return alteredHex;\n  }\n\n  function editCatTechNote(noteEdit, noteID, chosenCatTechnique) {\n    setCatTechniques(catTechniques => {\n      let updatedCatTechniques = [];\n      catTechniques.forEach(catTechnique => {\n        let updatedCatTechniqueNotes = [];\n\n        if (catTechnique.id === chosenCatTechnique.id) {\n          catTechnique.notes.forEach(catTechniqueNote => {\n            if (catTechniqueNote.noteID === noteID) {\n              updatedCatTechniqueNotes.push({\n                noteText: noteEdit,\n                noteID: noteID,\n                noteTitle: \"Note \" + noteID\n              });\n            } else {\n              updatedCatTechniqueNotes.push({\n                noteText: catTechniqueNote.noteText,\n                noteID: catTechniqueNote.noteID,\n                noteTitle: \"Note \" + catTechniqueNote.noteID\n              });\n            }\n          });\n          updatedCatTechniques.push({\n            id: catTechnique.id,\n            technique: catTechnique.technique,\n            color: catTechnique.color,\n            notes: updatedCatTechniqueNotes\n          });\n        } else {\n          updatedCatTechniques.push({\n            id: catTechnique.id,\n            technique: catTechnique.technique,\n            color: catTechnique.color,\n            notes: catTechnique.notes\n          });\n        }\n      });\n      return updatedCatTechniques;\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mainHeader\",\n      class: \"header\",\n      children: \"BJJ NOTES\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"description\",\n      class: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Add your techniques below. You can also add categories if you scroll down further (Instructionals, positions etc).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Feel free to drag and drop your techniques into their respective categories.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CategoryKeys, {\n      categoryKeys: categoryKeys\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"inContain\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"technique\",\n        children: \"Technique\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: techniqueRef,\n        id: \"technique\",\n        class: \"input\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createLog,\n        id: \"addNote\",\n        class: \"input\",\n        children: \"Add Technique\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"techniqueContain\",\n      children: /*#__PURE__*/_jsxDEV(Techniques, {\n        handleDeleteTechnique: handleDeleteTechnique,\n        handleDeleteNote: handleDeleteNote,\n        editNote: editNote,\n        addNote: addNote,\n        techniques: techniques\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"categoriesIn\",\n      class: \"inContain\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"instructional\",\n        children: \"Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: categoryRef,\n        id: \"category\",\n        class: \"input\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateCategory,\n        id: \"addCategory\",\n        class: \"input\",\n        children: \"Add Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Categories, {\n      handleDeleteCategory: handleDeleteCategory,\n      techniques: techniques,\n      editNote: editNote,\n      addNote: addNote,\n      handleDeleteTechnique: handleDeleteTechnique,\n      categories: categories\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"R4M/TXGX4nzuUZpmCMcNAkwkdTM=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/peter/Documents/React/bjj-notes/src/App.js"],"names":["React","useState","useRef","Techniques","Categories","CategoryKeys","App","techniques","setTechniques","categories","setCategories","categoryKeys","setCategoryKeys","categoryRef","techniqueRef","techniqueNo","Math","floor","random","catNo","createLog","e","technique","current","value","color","getRandom","toString","i","length","replace","number","parseInt","newNumber","alert","prevTechniques","id","notes","addNote","chosenTechnique","updatedTechniques","forEach","updatedTechnique","push","console","log","editNote","noteEdit","noteID","updatedTechniqueNotes","techniqueNote","noteText","noteTitle","handleCreateCategory","colorArray","category","prevCategories","catTechniques","prevCategoryKeys","catKeyTechniques","max","min","handleDeleteTechnique","techniqueID","filter","handleDeleteCategory","categoryID","categoryKey","handleDeleteNote","map","newNotes","note","handleDeleteCatTechnique","updatedCategories","catTechnique","addCatTechNote","chosenCatTechnique","updatedCatTechniques","handleDeleteCatTechNote","handleDrop","draggable","document","querySelector","target","style","oldColor","newColor","lighten","prevCatTechniques","hex","removeHash","substring","hexConvert","asNumber","alteredHex","editCatTechNote","setCatTechniques","updatedCatTechniqueNotes","catTechniqueNote"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport Techniques from './Techniques';\r\nimport Categories from './Categories';\r\nimport CategoryKeys from './CategoryKeys';\r\n\r\n\r\nexport default function App() {\r\n   const [techniques, setTechniques] = useState([]);\r\n   const [categories, setCategories] = useState([]);\r\n   const [categoryKeys, setCategoryKeys] = useState([]);\r\n   const categoryRef = useRef();\r\n   const techniqueRef = useRef();\r\n   let techniqueNo = Math.floor(Math.random()*100000);\r\n   let catNo = Math.floor(Math.random()*100000);\r\n   \r\n   \r\n   function createLog(e) {\r\n       const technique = techniqueRef.current.value;\r\n       let color = \"#\" + getRandom(2000000, 1000000).toString(16);\r\n    \r\n       for(let i = 0; i < techniques.length; i++)\r\n       { \r\n           if (color === techniques[i].color)\r\n           {\r\n                const replace = color.replace('#', '');\r\n                const number= parseInt(replace)\r\n                const newNumber = number + 100000;\r\n                color = newNumber\r\n           }\r\n       }\r\n\r\n       if(technique === \"\")\r\n       { alert(\"Please enter a technique.\") \r\n       return;\r\n        }\r\n        \r\n       setTechniques(prevTechniques => {\r\n      \r\n           return [...prevTechniques, {id: techniqueNo, technique:technique, color:color, notes:[]}];\r\n\r\n       });\r\n\r\n  \r\n       techniqueRef.current.value = null;\r\n    }\r\n\r\n    function addNote(notes, chosenTechnique) {\r\n        setTechniques(techniques => {\r\n          let  updatedTechniques = [];\r\n            techniques.forEach(technique => {\r\n                if (technique.id == chosenTechnique.id)\r\n                {\r\n                let updatedTechnique = {id: chosenTechnique.id, technique: chosenTechnique.technique, color: chosenTechnique.color, notes: notes}\r\n\r\n                updatedTechniques.push(updatedTechnique)\r\n                } else{\r\n                    \r\n                    updatedTechniques.push(technique)\r\n                }\r\n            \r\n             console.log(updatedTechniques)\r\n            })\r\n            \r\n            return updatedTechniques;\r\n        });\r\n        \r\n    }\r\n\r\n    function editNote(noteEdit, noteID, chosenTechnique) {\r\n        setTechniques(techniques => {\r\n            let updatedTechniques = [];\r\n            \r\n            techniques.forEach(technique => {\r\n                let updatedTechniqueNotes = [];\r\n                if (technique.id === chosenTechnique.id)\r\n                 {\r\n\r\n                    technique.notes.forEach(techniqueNote => {\r\n                        if (techniqueNote.noteID === noteID)\r\n                        { \r\n                            updatedTechniqueNotes.push({noteText:noteEdit, noteID:noteID, noteTitle:\"Note \" + (noteID)})\r\n                        } else\r\n                        {\r\n\r\n                            updatedTechniqueNotes.push({noteText:techniqueNote.noteText, noteID:techniqueNote.noteID, noteTitle:\"Note \" + (techniqueNote.noteID)})\r\n                        }\r\n                    })\r\n                    updatedTechniques.push({id: technique.id, technique: technique.technique, color: technique.color, notes: updatedTechniqueNotes})\r\n\r\n\r\n                  } else\r\n                  {\r\n                    updatedTechniques.push({id: technique.id, technique: technique.technique, color: technique.color, notes:technique.notes})\r\n                  }\r\n\r\n\r\n                })\r\n\r\n                return updatedTechniques;\r\n            })\r\n\r\n        }\r\n\r\n\r\n    \r\n\r\n    function handleCreateCategory()\r\n    {\r\n\r\n        // GREEN PURPLE BLUE BROWN RED YELLOW ORANGE BROWN GREY WHITE\r\n        const colorArray = [\"#08892c\",\"#8e057e\",\"#3f3f8c\",\"#874c47\", \"#dd9300\", \"#a32f2f\", \"#d1ca00\", \"#2d2020\"]\r\n        const category = categoryRef.current.value;\r\n\r\n        if(category === \"\")\r\n        { alert(\"Please enter a category.\") \r\n        return;\r\n         }\r\n\r\n         setCategories(prevCategories => {\r\n             return [...prevCategories, {id:catNo, category:category, color:colorArray[categories.length], catTechniques:[] }]\r\n         })\r\n\r\n         setCategoryKeys(prevCategoryKeys => {\r\n            return [...prevCategoryKeys, {id:catNo, category:category, color:colorArray[categories.length], catKeyTechniques:[] }]\r\n         })\r\n\r\n         categoryRef.current.value = null;\r\n\r\n    }\r\n\r\n    function getRandom(max, min) {\r\n        return Math.floor(Math.random() * (max - min) + min);\r\n    }\r\n\r\n    \r\n   const handleDeleteTechnique = (techniqueID) => {\r\n    setTechniques(techniques => {return techniques.filter(technique => technique.id !== techniqueID)}) \r\n}\r\n\r\nconst handleDeleteCategory = (categoryID) =>\r\n{\r\n    setCategories(categories => {return categories.filter(category => category.id !== categoryID)})\r\n    setCategoryKeys(categoryKeys => {return categoryKeys.filter(categoryKey => categoryKey.id !== categoryID)})\r\n}\r\n\r\n\r\n\r\n    function handleDeleteNote(noteID, techniqueID)\r\n    {\r\n        setTechniques(techniques => {\r\n           return techniques.map(technique =>\r\n                {\r\n                    \r\n                    if (technique.id === techniqueID)\r\n                    {\r\n                       const newNotes = technique.notes.filter(note => note.noteID != noteID);\r\n\r\n                       return {id: technique.id, technique: technique.technique, color: technique.color, notes: newNotes}\r\n\r\n                    } else\r\n                    {\r\n                        return {id: technique.id, technique: technique.technique, color: technique.color, notes: technique.notes}\r\n                    }\r\n\r\n                    \r\n                })\r\n        })\r\n    }\r\n\r\n    \r\n    const handleDeleteCatTechnique = (techniqueID, categoryID) => {\r\n        setCategories(categories => {\r\n           let updatedCategories = []\r\n            for (let i = 0; i < categories.length; i++)\r\n            {\r\n                if (categories[i].id === categoryID)\r\n                {\r\n\r\n         updatedCategories.push( {id:categories[i].id, category:categories[i].category, color:categories[i].color, catTechniques:[categories[i].catTechniques.filter(catTechnique => catTechnique[i].id !== techniqueID)] })\r\n                }\r\n            }\r\n        }) \r\n    }\r\n    \r\n\r\n\r\nfunction addCatTechNote(newNotes, chosenCatTechnique) {\r\n    setCategories(categories => {\r\n      let  updatedCategories = [];\r\n        categories.forEach(category => {\r\n            let updatedCatTechniques = [];\r\n            category.catTechniques.forEach(catTechnique =>\r\n                {\r\n            if (catTechnique.id == chosenCatTechnique.id)\r\n            {\r\n            let updatedTechnique = {id: chosenCatTechnique.id, technique: chosenCatTechnique.technique, color: chosenCatTechnique.color, notes: newNotes}\r\n\r\n            updatedCatTechniques.push(updatedTechnique)\r\n            } else{\r\n                \r\n                updatedCatTechniques.push(catTechnique)\r\n            }\r\n        \r\n        \r\n        })\r\n        updatedCategories.push({ id:category.id, category:category.category, color:category.color, catTechniques:updatedCatTechniques })\r\n        })\r\n        \r\n        return updatedCategories;\r\n    });\r\n    \r\n}\r\n\r\nfunction handleDeleteCatTechNote(noteID, techniqueID)\r\n{\r\n    setCategories(categories => {\r\n     return categories.map(category =>\r\n            {\r\n                \r\n       let updatedCatTechniques =  category.catTechniques.map(catTechnique =>\r\n            {\r\n                \r\n                if (catTechnique.id === techniqueID)\r\n                {\r\n                   const newNotes = catTechnique.notes.filter(note => note.noteID != noteID);\r\n\r\n                   return {id: catTechnique.id, technique: catTechnique.technique, color: catTechnique.color, notes: newNotes}\r\n\r\n                } else\r\n                {\r\n                    return {id: catTechnique.id, technique: catTechnique.technique, color: catTechnique.color, notes: catTechnique.notes}\r\n                }\r\n\r\n                \r\n            })\r\n\r\n            return {id:category.id, category:category.category, color:category.color, catTechniques:updatedCatTechniques }\r\n    })\r\n})\r\n}\r\n\r\nconst handleDrop = (e, techniques) =>\r\n{\r\n \r\n  const draggable = document.querySelector('.dragging');\r\n  e.target.style.filter = \"brightness(100%)\";\r\n  techniques.forEach(technique => {\r\n\r\n        if (draggable.id === technique.id.toString())\r\n        {\r\n           const oldColor = category.color;\r\n           console.log(oldColor)\r\n            \r\n       const newColor = lighten(oldColor);\r\n        \r\n        setCategories(categories => {\r\n\r\n          \r\n            return [...prevCatTechniques, {id: technique.id , technique:technique.technique, color:newColor, notes: technique.notes}]\r\n            \r\n        })\r\n        }\r\n\r\n        handleDeleteTechnique(technique.id);\r\n    })\r\n   \r\n\r\n}\r\n    function lighten(hex)\r\n    {   \r\n\r\n     const removeHash = hex.substring(1,hex.length);\r\n     const hexConvert = \"0x\" + removeHash\r\n      const asNumber = parseInt(hexConvert);\r\n      \r\n      const alteredHex ='#' + (asNumber + 1000000).toString(16)\r\n\r\n        return alteredHex;\r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n\r\nfunction editCatTechNote(noteEdit, noteID, chosenCatTechnique) {\r\n    setCatTechniques(catTechniques => {\r\n        let updatedCatTechniques = [];\r\n        \r\n        catTechniques.forEach(catTechnique => {\r\n            let updatedCatTechniqueNotes = [];\r\n            if (catTechnique.id === chosenCatTechnique.id)\r\n             {\r\n\r\n                catTechnique.notes.forEach(catTechniqueNote => {\r\n                    if (catTechniqueNote.noteID === noteID)\r\n                    { \r\n                        \r\n                        updatedCatTechniqueNotes.push({noteText:noteEdit, noteID:noteID, noteTitle:\"Note \" + (noteID)})\r\n                    } else{\r\n\r\n                        updatedCatTechniqueNotes.push({noteText:catTechniqueNote.noteText, noteID:catTechniqueNote.noteID, noteTitle:\"Note \" + (catTechniqueNote.noteID)})\r\n                    }\r\n                })\r\n                updatedCatTechniques.push({id: catTechnique.id, technique: catTechnique.technique, color: catTechnique.color, notes: updatedCatTechniqueNotes})\r\n\r\n\r\n              } else\r\n              {\r\n                updatedCatTechniques.push({id: catTechnique.id, technique: catTechnique.technique, color: catTechnique.color, notes:catTechnique.notes})\r\n              }\r\n\r\n\r\n            })\r\n\r\n            return updatedCatTechniques;\r\n        })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <div id=\"mainHeader\" class=\"header\">BJJ NOTES</div>\r\n        <div id=\"description\" class=\"header\">\r\n            <p>Add your techniques below. You can also add categories if you scroll down further (Instructionals, positions etc).</p>\r\n            <p>Feel free to drag and drop your techniques into their respective categories.</p>\r\n        </div>\r\n       \r\n        <CategoryKeys categoryKeys={categoryKeys} />\r\n        <div class=\"inContain\">\r\n        <label for=\"technique\">Technique</label>    \r\n        <input ref={techniqueRef} id=\"technique\" class=\"input\" type=\"text\"></input>\r\n        <button onClick={createLog} id=\"addNote\" class=\"input\">Add Technique</button>\r\n        </div>\r\n        <div id=\"techniqueContain\">\r\n        <Techniques handleDeleteTechnique={handleDeleteTechnique} handleDeleteNote={handleDeleteNote}  editNote={editNote} addNote={addNote} techniques={ techniques } />\r\n        </div>\r\n        <div id=\"categoriesIn\" class=\"inContain\">\r\n        <label for=\"instructional\">Category</label>    \r\n        <input ref={categoryRef} id=\"category\" class=\"input\" type=\"text\"></input>\r\n        <button onClick={handleCreateCategory} id=\"addCategory\" class=\"input\">Add Category</button>\r\n        </div>\r\n        <Categories handleDeleteCategory={handleDeleteCategory} techniques={techniques} editNote={editNote} addNote={addNote} handleDeleteTechnique={handleDeleteTechnique} categories={categories}/>\r\n        </>\r\n    )\r\n    \r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}